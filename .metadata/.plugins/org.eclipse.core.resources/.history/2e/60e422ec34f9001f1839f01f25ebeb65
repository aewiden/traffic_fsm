/*
 * module6.c ---
 *
 *
 */
#include <stdio.h>
#include "xil_printf.h"
#include "xparameters.h"
#include "servo.h"
#include "adc.h"
#include "led.h"
#include "io.h"
#include "gic.h"
#include "ttc.h"

// Hardware Constants
#define MAX_DUTY 8
#define MIN_DUTY 3.75
/* led colors */
#define RED 5
#define BLUE 6
#define GREEN 7
#define YELLOW 8
#define PED_LED   4


#define MIN_GREEN_TICKS 100
#define YELLOW_TICKS    30
#define PED_RED_TICKS   100
#define NORMAL_RED_TICKS 30

// FSM States
typedef enum {
    NORMAL_RED,
    NORMAL_YELLOW1,
    NORMAL_GREEN,
    NORMAL_YELLOW2,
    TRAIN_CLOSING,
    TRAIN_CLOSED,
    TRAIN_OPENING,
    TRAIN_WAIT_PED,
    MAINTENANCE
} SystemState;

static const char *state_names[] = {
    "NORMAL_RED", "NORMAL_YELLOW1", "NORMAL_GREEN",
    "NORMAL_YELLOW2", "TRAIN_CLOSING", "TRAIN_CLOSED",
    "TRAIN_OPENING", "TRAIN_WAIT_PED", "MAINTENANCE"
};

// Global Variables
static volatile SystemState current_state = NORMAL_RED;
static volatile bool pedestrian_request = false;
static volatile bool train_arriving = false;
static volatile bool maintenance_active = false;
static volatile unsigned int fsm_tick_count = 0;
static double current_servo_duty = 7.5;

// TTC Callback (10Hz = 100ms ticks)
void fsm_ttc_callback(void) {
    fsm_tick_count++;
}

// Button Callback
void btn_callback(unsigned int btn) {
    if (btn & 0x3) {  // Accept pedestrian requests in any state
        pedestrian_request = true;
        printf("\n\r[INPUT] Pedestrian request\n\r");
    }
}

// Switch Callback
void sw_callback(unsigned int sw) {
    // SW0 (bit 0) controls train arrival/clear
    bool new_train = (sw & 0x1);
    // SW1 (bit 1) controls maintenance mode
    bool new_maintenance = (sw & 0x2);

    if(new_train != train_arriving || new_maintenance != maintenance_active) {
        train_arriving = new_train;
        maintenance_active = new_maintenance;
        printf("\n\r[INPUT] Train: %s | Maintenance: %s\n\r",
               train_arriving ? "ARRIVING" : "CLEAR",
               maintenance_active ? "ON" : "OFF");
    }
}

// LED Control
void setTrafficLED(u32 color) {
    led_set(color, LED_ON);
}

// Hardware Initialization
void hardware_init() {
    gic_init();
    led_init();
    servo_init();
    adc_init();
    io_btn_init(btn_callback);
    io_sw_init(sw_callback);
    ttc_init(10, fsm_ttc_callback);
}

// Status Display
void update_display() {
    printf("\r%-15s | Gate: %-6s | Train: %-8s | Ped: %s | Ticks: %04d",
           state_names[current_state],
           (current_servo_duty > 7.5) ? "OPEN" : "CLOSED",
           train_arriving ? "ARRIVING" : "CLEAR",
           ((current_state == NORMAL_RED && pedestrian_request) ||
            (current_state >= TRAIN_CLOSING && current_state <= TRAIN_WAIT_PED) ||
            (current_state == MAINTENANCE)) ? "WALK" : "STOP",
           fsm_tick_count);
}

// Main FSM
void run_fsm() {
    static unsigned int flash_timer = 0;
    static bool blue_led_state = false;
    static SystemState prev_state = MAINTENANCE;
    float pot_val = adc_get_pot();


    if(prev_state != current_state) {
        printf("\n\r[FSM] Transition: %s -> %s\n\r",
               state_names[prev_state], state_names[current_state]);
        prev_state = current_state;
    }

    if(maintenance_active && current_state != MAINTENANCE) {
        current_state = MAINTENANCE;
        fsm_tick_count = 0;
        current_servo_duty = MIN_DUTY;
        servo_set(MIN_DUTY);
    }
    else if(train_arriving && current_state < TRAIN_CLOSING) {
        current_state = TRAIN_CLOSING;
        fsm_tick_count = 0;
    }

    switch(current_state) {
        case NORMAL_RED: {
            unsigned int red_duration = pedestrian_request ? PED_RED_TICKS : NORMAL_RED_TICKS;

            setTrafficLED(RED);
            current_servo_duty = MAX_DUTY; // Gate open
            servo_set(MAX_DUTY);
            led_set(PED_LED, pedestrian_request);

            if(fsm_tick_count >= red_duration) {
                if(pedestrian_request) {
                    pedestrian_request = false;
                    led_set(PED_LED, false);
                }
                current_state = NORMAL_YELLOW1;
                fsm_tick_count = 0;
            }
            break;
        }

        case NORMAL_YELLOW1:
            setTrafficLED(YELLOW);
            if(fsm_tick_count >= YELLOW_TICKS) {
                current_state = NORMAL_GREEN;
                fsm_tick_count = 0;
            }
            break;

        case NORMAL_GREEN:
            setTrafficLED(GREEN);
            current_servo_duty = MAX_DUTY;
            servo_set(MAX_DUTY);

            if(fsm_tick_count >= MIN_GREEN_TICKS) {
                current_state = NORMAL_YELLOW2;
                fsm_tick_count = 0;
            }
            break;

        case NORMAL_YELLOW2:
            setTrafficLED(YELLOW);
            if(fsm_tick_count >= YELLOW_TICKS) {
                current_state = NORMAL_RED;
                fsm_tick_count = 0;
            }
            break;

        case TRAIN_CLOSING:
            setTrafficLED(RED);
            current_servo_duty = MIN_DUTY; // Close gate
            servo_set(MIN_DUTY);
            current_state = TRAIN_CLOSED;
            fsm_tick_count = 0;
            break;

        case TRAIN_CLOSED:
            led_set(PED_LED, true);
            if(!train_arriving) {
                current_state = TRAIN_OPENING;
                fsm_tick_count = 0;
            }
            break;

        case TRAIN_OPENING:
            current_servo_duty = MAX_DUTY; // Open gate
            servo_set(MAX_DUTY);
            current_state = TRAIN_WAIT_PED;
            fsm_tick_count = 0;
            break;

        case TRAIN_WAIT_PED:
            led_set(PED_LED, true);
            if(fsm_tick_count >= PED_RED_TICKS) {
                current_state = NORMAL_YELLOW1;
                led_set(PED_LED, false);
                fsm_tick_count = 0;
            }
            break;

        case MAINTENANCE:
            led_set(ALL, LED_OFF);
            led_set(PED_LED, true);

            // First handle forced close on entry
            if(fsm_tick_count == 0) {
                current_servo_duty = MIN_DUTY;
                servo_set(MIN_DUTY);
            }
            // Then allow manual control
            else {
                current_servo_duty = (pot_val * (MAX_DUTY - MIN_DUTY)) + MIN_DUTY;
                servo_set(current_servo_duty);
            }

            // Flash blue LED
            if(flash_timer++ >= 10) {
                blue_led_state = !blue_led_state;
                led_set((blue_led_state ? BLUE : 0), LED_ON);
                flash_timer = 0;
            }

            if(!maintenance_active) {
                current_state = NORMAL_RED;
                led_set(PED_LED, false);
                fsm_tick_count = 0;
            }
            break;
    }

    update_display();
}

int main() {
    hardware_init();
    ttc_start();

    printf("\n\r[initialized]\n\r");
    printf("Switch 0: Train Control | Switch 1: Maintenance Mode\n\r");
    printf("Normal sequence: GREEN (10s) → YELLOW (3s) → RED (3s/10s)\n\r");
    
    while(1) {
        run_fsm();
        usleep(100000);
    }

    return 0;
}
