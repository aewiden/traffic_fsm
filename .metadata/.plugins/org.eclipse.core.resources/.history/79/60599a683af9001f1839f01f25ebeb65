/*
 * module6.c ---
 *
 *
 */
#include <stdio.h>
#include "xil_printf.h"
#include "xparameters.h"
#include "servo.h"
#include "adc.h"
#include "led.h"
#include "io.h"
#include "gic.h"
#include "ttc.h"

// Hardware Constants
/* led colors */
#define RED 5
#define BLUE 6
#define GREEN 7
#define YELLOW 8
#define PED_LED   4

#define MIN ((double)5.5)
#define MAX ((double)10.25)
#define MID ((double)7.5)
#define MIN_GREEN_TICKS 100
#define YELLOW_TICKS    30
#define PED_RED_TICKS   100
#define RED_LIGHT_TICKS 30

// FSM States
typedef enum {
    RED_LIGHT,
    YELLOW_LIGHT1,
    GREEN_LIGHT,
    YELLOW_LIGHT2,
    TRAIN_CLOSING,
    TRAIN_CLOSED,
    TRAIN_OPENING,
    TRAIN_WAIT_PED,
    MAINTENANCE
} SystemState;

static const char *state_names[] = {
    "RED_LIGHT", "YELLOW_LIGHT1", "GREEN_LIGHT",
    "YELLOW_LIGHT2", "TRAIN_CLOSING", "TRAIN_CLOSED",
    "TRAIN_OPENING", "TRAIN_WAIT_PED", "MAINTENANCE"
};

// Global Variables
static volatile SystemState current_state = RED_LIGHT;
static volatile bool pedestrian_request = false;
static volatile bool train_arriving = false;
static volatile bool maintenance_active = false;
static volatile unsigned int fsm_tick_count = 0;
static double current_servo_duty = 7.5;
static bool done = false;

// TTC Callback (10Hz = 100ms ticks)
void fsm_ttc_callback(void) {
    fsm_tick_count++;
}

// Button Callback
void btn_callback(unsigned int btn) {
    if (btn & (1 << 0)) {
               pedestrian_request = true;
               printf("\n\r[INPUT] Pedestrian request\n\r");
   }
           if (btn & (1 << 2)) {
               pedestrian_request = true;
               printf("\n\r[INPUT] Pedestrian request\n\r");
           }
           if (btn & (1 << 3)) {
               done = true;
           }
}

// Switch Callback
void sw_callback(unsigned int sw) {
    // SW0 (bit 0) controls train arrival/clear
    bool new_train = (sw & 0x1);
    // SW1 (bit 1) controls maintenance mode
    bool new_maintenance = (sw & 0x2);

    if(new_train != train_arriving || new_maintenance != maintenance_active) {
        printf("\n\r[INPUT] Train: %s | Maintenance: %s\n\r",
               train_arriving ? "ARRIVING" : "CLEAR",
               maintenance_active ? "ON" : "OFF");
    }
    if (sw & (1 << 0)) {
           train_arriving = !train_arriving;
        }
    if (sw & (1 << 1)) {
           maintenance_active = !maintenance_active;
        }
}

// LED Control
void setTrafficLED(u32 color) {
    led_set(color, LED_ON);
}

// Hardware Initialization
void hardware_init() {
    gic_init();
    led_init();
    servo_init();
    adc_init();
    io_btn_init(btn_callback);
    io_sw_init(sw_callback);
    ttc_init(10, fsm_ttc_callback);
}

// Status Display
void update_display() {
    printf("\r%-15s | Gate: %-6s | Train: %-8s | Ped: %s \n",
           state_names[current_state],
           (current_servo_duty > 7.5) ? "OPEN" : "CLOSED",
           train_arriving ? "ARRIVING" : "CLEAR",
           ((current_state == RED_LIGHT && pedestrian_request) ||
            (current_state >= TRAIN_CLOSING && current_state <= TRAIN_WAIT_PED) ||
            (current_state == MAINTENANCE)) ? "WALK" : "STOP",
           fsm_tick_count);
    fflush(stdout);
}

// Main FSM
void run_fsm() {
	static unsigned int flash_timer = 0;
    static bool blue_led_state = false;
    static SystemState prev_state = MAINTENANCE;
    float pot_val = adc_get_pot();


    if(prev_state != current_state) {
        printf("\n\r\n\r");
        prev_state = current_state;
    }

    if(maintenance_active && current_state != MAINTENANCE) {
        current_state = MAINTENANCE;
        fsm_tick_count = 0;
        current_servo_duty = MIN;
        servo_set(MIN);
    }
    else if(train_arriving && current_state < TRAIN_CLOSING) {
        current_state = TRAIN_CLOSING;
        fsm_tick_count = 0;
    }

    switch(current_state) {
        case RED_LIGHT: {
            unsigned int red_duration = pedestrian_request ? PED_RED_TICKS : RED_LIGHT_TICKS;

            setTrafficLED(RED);
            current_servo_duty = MAX; // Gate open
            servo_set(MAX);
            led_set(PED_LED, pedestrian_request);

            if(fsm_tick_count >= red_duration) {
                if(pedestrian_request) {
                    pedestrian_request = false;
                    led_set(PED_LED, false);
                }
                current_state = YELLOW_LIGHT1;
                fsm_tick_count = 0;
            }
            break;
        }

        case YELLOW_LIGHT1:
            setTrafficLED(YELLOW);
            if(fsm_tick_count >= YELLOW_TICKS) {
                current_state = GREEN_LIGHT;
                fsm_tick_count = 0;
            }
            break;

        case GREEN_LIGHT:
            setTrafficLED(GREEN);
            current_servo_duty = MAX;
            servo_set(MAX);

            if(fsm_tick_count >= MIN_GREEN_TICKS) {
                current_state = YELLOW_LIGHT2;
                fsm_tick_count = 0;
            }
            break;

        case YELLOW_LIGHT2:
            setTrafficLED(YELLOW);
            if(fsm_tick_count >= YELLOW_TICKS) {
                current_state = RED_LIGHT;
                fsm_tick_count = 0;
            }
            break;

        case TRAIN_CLOSING:
            setTrafficLED(RED);
            current_servo_duty = MIN; // Close gate
            servo_set(MIN);
            current_state = TRAIN_CLOSED;
            fsm_tick_count = 0;
            break;

        case TRAIN_CLOSED:
            led_set(PED_LED, true);
            if(!train_arriving) {
                current_state = TRAIN_OPENING;
                fsm_tick_count = 0;
            }
            break;

        case TRAIN_OPENING:
            current_servo_duty = MAX; // Open gate
            servo_set(MAX);
            current_state = TRAIN_WAIT_PED;
            fsm_tick_count = 0;
            break;

        case TRAIN_WAIT_PED:
            led_set(PED_LED, true);
            if(fsm_tick_count >= PED_RED_TICKS) {
                current_state = YELLOW_LIGHT1;
                led_set(PED_LED, false);
                fsm_tick_count = 0;
            }
            break;

        case MAINTENANCE:
            led_set(ALL, LED_OFF);
            led_set(PED_LED, true);

            // First handle forced close on entry
            if(fsm_tick_count == 0) {
                current_servo_duty = MIN;
                servo_set(MIN);
            }
            // Then allow manual control
            else {
                current_servo_duty = (pot_val * (MAX - MIN)) + MIN;
                servo_set(current_servo_duty);
            }

            if(!maintenance_active) {
                current_state = RED_LIGHT;
                led_set(PED_LED, false);
                fsm_tick_count = 0;
            }
            break;
    }
    if(maintenance_active && flash_timer == 10) {
        	led_set(ALL, LED_OFF);
        	led_set(RED, LED_OFF);
        	led_set(GREEN, LED_OFF);
        	led_set(BLUE, blue_led_state);
        	blue_led_state = !blue_led_state;
        	led_set(BLUE, blue_led_state);
        	blue_led_state = !blue_led_state;
        }
    update_display();
    flash_timer++;
}

int main() {
    hardware_init();
    ttc_start();
    setvbuf(stdin, NULL, _IONBF, 0);
    setvbuf(stdout, NULL, _IONBF, 0);
    printf("\n\r[initialized]\n\r");
    printf("Switch 0: Train Control | Switch 1: Maintenance Mode\n\r");
    printf("Normal sequence: GREEN (10s) → YELLOW (3s) → RED (3s/10s)\n\r");
    
    while(!done) {
        run_fsm();
        usleep(100000);
    }

    printf("\n\r[shutdown]\n\r");
    return 0;
}
